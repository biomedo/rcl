# -*- org -*-

# Time-stamp: <2012-04-03 18:28:20 Tuesday by lian>

#+OPTIONS: ^:nil author:nil timestamp:nil creator:nil
Anthouny's FEMObject Program Learning Notes

** How to identify a random variable 
   Identify a random variable by the polynomial chaos and empirical K-L decomposition, please refer to the paper G.Stefanou, A.Nouy 2009. The key issue is how to estimate the coefficients of the polynimial chaos. Here a projection method using empirical CDFs is employed, in Sec. 5.2 of the paper A.nouy 2009. For the implementation of the identification in FEMObject code of matlab, firstly the input is the sample Xs, which has for example n samples. Secondly, Xpc = eicdfpcproject(Xs',20,[],'nbgauss',40); is used to get the pc decomposition of the Xs. Xpc is a PCMATRIX object whose class member 'Value' and 'PC' denote the ploynomial chaos coefficients and polynomial chaos random polynomial respectively. So with this PCMATRIX, we could own the necessary information to construct the representation of the random variable X(thet) based on the polynomial chaos.
   

** How to understand class object in matlab code
#+begin_src matlab
  value = MULTIMATRIX();
  PC = POLYCHAOS();
  x=struct();
  x.ximasse = {};
  x=class(x,'PCMATRIX',value,PC);
#+end_src
  1. This kind of class definition in matlab is for old version compatibility.
  2. It can be explained as follows: 'x' is a struct of subclass containing properties, 'PCMATRIX' is the name of subclass, value and PC are two object varaibles of two base classes to be derived. The fields and properties and their current status of 'value' and 'PC' will be derived into the object varaible x of the subclass. Note that the 'value' and 'PC' can not be accessed outside the subclass, thus if one wants to access the two variables, one has to define a function in subclass to access the two objects. Moreover, inside subclass, one can access the 'value' through subobject.MULTIMATRIX but suboject.value. Since inside subclass, the name 'value' does not exist. I.e. one can access the base class's varable through the name of base class.
  3. In order to query and view the available methods for this kind of class, use the command like
     1. methods(<classname>)
     2. methodsview(<classname>)
     3. open <classname>/<functionname>
     4. fieldnames(<classname>)
     5. properties(<classname>)
     6. what
     7. which <a function name>
        

** project operation in FEMObject code
#+begin_src matlab
  X = PCMODEL(RANDVARS(a,d),'pcg','order',5) % chaos generalis
  project(apc,PC);
#+end_src
  - Here, 'apc' stands a PCMATRIX object that contains the identified coiffients and Polynomial Chaos information. PC is another expansion that represents a higher order expansion than apc's PC. This involves relocate (or projection, merge) apc's coefficients onto PC.
  - In PCMODEL, each random variable is identified seperately, i.e. unidimentional. Then these coefficents are projected onto apc with multidimentional. However, one should check the PCMATRIX values (coefficients of one dimentional PC) and getindices. Then we will find that only the Hs corresponding to the variable (with corresponding number (setnumber)) are used, since most of the PCMATRIX values are zeros. Therefore, the final PCMATRIX object, one row of the matrix value corresponds to the coefficients of one dimension. 

** Decomposition function of random variables
   X=X0*H0+X1*H1+...+XP*HP
#+begin_src matlab
  apc = decompfun(PCdecomp,[],[],fun,RANDVARS(PCdecomp),RANDVARS(a));
#+end_src
  - PCdecomp stands for the PC expansion (m,p), fun means the random function of a.
  - PCdecomp.indices displays the index of PC expansion, e.g. m=2,p=3 means the dimension is 2 (xi_1,xi_2) and p=3 stands for the maximum polynomial order of the H, e.g. H(xi_1,x_2)=h_a(xi_1)*h_b(xi_2), a,b represents the order of each h, a+b<=3. the PCdecomp.indices display a matrix, the two column means the a,b respectively for each term of the PC expansion. the last column stands for the sum order (a+b), obviously this column should be <=3. 
  - Whatever decompfun or decomppc, the principle is nearly the same. We need to evaluate the value of X corresponding to gauss point. In this decomposition, with the help of fun, one can determine the value of X corresponding to each y (gausse point) by
    - For the docomposition of known random variables: see bx=icdf(b,cdf(a,ax)); in open RANDVAR/transfer, i.e. F_X(x)=F_xi(y).
    - For the decomposition of a function of known random variables: directly add calculation of the function
    - Unknown random variables: Emprique CDF of X
    - Maximum Vraisembles or Inference Baiycienne.
    - decompmatrix can be used to decompose a random vector or matrix

** To C++ Programer
   In C++, the concept of programing is very different from matlab. In C++, the data is stored distributedly in various objects and one can reference them by pointers and references, but unfornately in matlab the data is stored in the final object, i.e. the key data is finally saved in one object that keeping a big matrix or multiarray, e.g. the key data is finally stored in CPC in the following example.
#+begin_src matlab
  lambda = cell(1,m);
  p=4;
  PC = POLYCHAOS(m,p);
  CPC = muC;
  for i=1:m
      lambda{i} = eicdfpcproject(V(:,i),p);
      lambda{i} = setnumber(lambda{i},i);
      lambda{i} = project(lambda{i},PC);
      CPC = CPC + U(:,i)*lambda{i};
  end
#+end_src
  For this code, the m random variables are assumed to be independent.

** Polynomial Chaos using Gausse-Hermit for the representation of random variables


** useful misc commands at matlab
   - all  test if values are non-zeros
   - isa  test if a varaible is a specific object type, e.g. isa(v,'PCRADIALMATRIX')
   - prod product of array elements
   - ismember(a,b) test if a is in the set of b
   - setdiff find set difference of two vectors
   - fun = inline('transfer(xi,a,gauss)','gauss','xi','a'); define inline function and change also the order of parameters
   - fcnchk(f) check if f is function of or, if yes return the f, else zeros
   - isempty(ng) check if the varin of function is empty or not
   - ksdensity  Kernel smoothing density estimate for probability density
   - null(A)  an orthornomal basis for the null space of A
   - numel(Xc) could be PCMATRIX, PCRADIALMATRIX etc. to determine the number of components of random vector
   - kron,dot,cross
   - ischarin('rotated',varargin)
   - eps float relative accuray, smaller number
   - inf, NaN, isinf,isNan
   - linspace(start,end,number) create a linear space

