# -*- org -*-

# Time-stamp: <2011-11-29 16:38:22 Tuesday by lian>

#+OPTIONS: ^:nil author:nil timestamp:nil creator:nil
Anthouny's FEMObject Program Learning Notes

** How to identify a random variable 
   Identify a random variable by the polynomial chaos and empirical K-L decomposition, please refer to the paper G.Stefanou, A.Nouy 2009. The key issue is how to estimate the coefficients of the polynimial chaos. Here a projection method using empirical CDFs is employed, in Sec. 5.2 of the paper A.nouy 2009. For the implementation of the identification in FEMObject code of matlab, firstly the input is the sample Xs, which has for example n samples. Secondly, Xpc = eicdfpcproject(Xs',20,[],'nbgauss',40); is used to get the pc decomposition of the Xs. Xpc is a PCMATRIX object whose class member 'Value' and 'PC' denote the ploynomial chaos coefficients and polynomial chaos random polynomial respectively. So with this PCMATRIX, we could own the necessary information to construct the representation of the random variable X(thet) based on the polynomial chaos.
   

** How to understand class object in matlab code
#+begin_src matlab
  value = MULTIMATRIX();
  PC = POLYCHAOS();
  x=struct();
  x.ximasse = {};
  x=class(x,'PCMATRIX',value,PC);
#+end_src
  1. This kind of class definition in matlab is for old version compatibility.
  2. It can be explained as follows: 'x' is a struct of subclass containing properties, 'PCMATRIX' is the name of subclass, value and PC are two object varaibles of two base classes to be derived. The fields and properties and their current status of 'value' and 'PC' will be derived into the object varaible x of the subclass. Note that the 'value' and 'PC' can not be accessed outside the subclass, thus if one wants to access the two variables, one has to define a function in subclass to access the two objects. Moreover, inside subclass, one can access the 'value' through subobject.MULTIMATRIX but suboject.value. Since inside subclass, the name 'value' does not exist. I.e. one can access the base class's varable through the name of base class.
  3. In order to query and view the available methods for this kind of class, use the command like
     1. methods(<classname>)
     2. methodsview(<classname>)
     3. open <classname>/<functionname>
     4. fieldnames(<classname>)
     5. properties(<classname>)
     6. what
     7. which <a function name>
        

** To C++ Programer
   In C++, the concept of programing is very different from matlab. In C++, the data is stored distributedly in various objects and one can reference them by pointers and references, but unfornately in matlab the data is stored in the final object, i.e. the key data is finally saved in one object that keeping a big matrix or multiarray, e.g. the key data is finally stored in CPC in the following example.
#+begin_src matlab
  lambda = cell(1,m);
  p=4;
  PC = POLYCHAOS(m,p);
  CPC = muC;
  for i=1:m
      lambda{i} = eicdfpcproject(V(:,i),p);
      lambda{i} = setnumber(lambda{i},i);
      lambda{i} = project(lambda{i},PC);
      CPC = CPC + U(:,i)*lambda{i};
  end
#+end_src

** Polynomial Chaos using Gausse-Hermit for the representation of random variables


** useful misc commands at matlab
   - all  test if values are non-zeros
   - isa  test if a varaible is a specific object type, e.g. isa(v,'PCRADIALMATRIX')
   - prod product of array elements
